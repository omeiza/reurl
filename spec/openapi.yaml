openapi: 3.0.3
info:
  title: URL Shortener API
  description: API for URL Shortener
  contact:
    name: omeiza
    email: owudaomeiza@gmail.com
  version: "1.0"
paths:
  # Links
  /links:
    parameters:
      - in: header
        name: x-api-key
        description: API Key
        required: true
        schema:
          type: string
    get:
      description: Get links
      parameters:
        - &count
          name: count
          in: query
          description: count per page
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 24
        - &page
          name: page
          in: query
          description: page
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: status
          in: query
          description: Link status
          schema:
            type: string
            enum:
              - all
              - published
              - approved
              - rejected
            default: all
        - name: order
          in: query
          description: Order of memes search result
          schema:
            type: string
            enum:
              - asc
              - desc
            default: desc
        - name: orderBy
          in: query
          description: Field to order by
          schema:
            type: string
            enum:
              - createdAt
              - updatedAt
              - viewCount
            default: updatedAt
        - name: q
          in: query
          description: Search query text
          schema:
            type: string
      responses:
        200:
          description: List of user links
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/links"
        401:
          $ref: "#/components/responses/authentication"
        403:
          $ref: "#/components/responses/forbidden"
        404:
          $ref: "#/components/responses/notFound"
    put:
      description: Add new link
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - url
              properties:
                url:
                  type: string
                  format: uri
      responses:
        200:
          description: Link id
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
        401:
          $ref: "#/components/responses/authentication"
        403:
          $ref: "#/components/responses/forbidden"
  /links/{id}:
    parameters:
      - in: header
        name: x-api-key
        description: API Key
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: Link id
        required: true
        schema:
          type: string
    get:
      description: Get specific link
      responses:
        200:
          description: Link details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/link"
        401:
          $ref: "#/components/responses/authentication"
        403:
          $ref: "#/components/responses/forbidden"
        404:
          $ref: "#/components/responses/notFound"
    post:
      description: Update specific link
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - url
              properties:
                url:
                  type: string
      responses:
        200:
          description: Link details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/link"
        401:
          $ref: "#/components/responses/authentication"
        403:
          $ref: "#/components/responses/forbidden"
        404:
          $ref: "#/components/responses/notFound"
    delete:
      description: Delete specific link
      responses:
        200:
          $ref: "#/components/responses/ok"
        401:
          $ref: "#/components/responses/authentication"
        403:
          $ref: "#/components/responses/forbidden"
        404:
          $ref: "#/components/responses/notFound"
  # Users
  /users/{username}:
    get:
      description: Get user
      parameters:
        - in: header
          name: x-api-key
          description: API Key
          required: true
          schema:
            type: string
        - name: username
          in: path
          description: User username
          required: true
          schema:
            type: string
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        401:
          $ref: "#/components/responses/authentication"
  # Authentication
  /auth/login:
    post:
      description: Login
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/loginWithUsername"
                - $ref: "#/components/schemas/loginWithEmail"
      responses:
        200:
          description: API key
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKey:
                    type: string
        401:
          $ref: "#/components/responses/authentication"
  /auth/signup:
    put:
      description: Signup
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/withUsername"
                - $ref: "#/components/schemas/withEmail"
      responses:
        200:
          description: API key
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKey:
                    type: string
        400:
          $ref: "#/components/responses/invalidRequest"
# Components
components:
  responses:
    ok:
      description: "Success"
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
    invalidRequest:
      description: "Bad Request"
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
    authentication:
      description: "Access denied"
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
    forbidden:
      description: "Forbidden Request"
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
    notFound:
      description: "Resource not found"
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
  schemas:
    user:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        username:
          type: string
        isAdmin:
          type: boolean
        isActive:
          type: boolean
        createdAt:
          type: string
          format: 'date-time'
        updatedAt:
          type: string
          format: 'date-time'
    links:
      type: object
      properties:
        count:
          type: integer
        page:
          type: integer
        perPage:
          type: integer
        links:
          type: array
          items:
            $ref: "#/components/schemas/link"
    link:
      type: object
      properties:
        id:
          type: string
        userId:
          type: integer
        url:
          type: string
        viewCount:
          type: integer
        status:
          type: string
        createdAt:
          type: string
          format: 'date-time'
        updatedAt:
          type: string
          format: 'date-time'
    withUsername:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
          format: password
    withEmail:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password